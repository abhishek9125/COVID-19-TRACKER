{"version":3,"sources":["util.js","Map.js","Table.js","LineGraph.js","InfoBox.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","className","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","color","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","props","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","InfoBox","title","isRed","active","total","Card","onClick","CardContent","Typography","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd8cabd3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a,b) => (a.cases>b.cases ? -1 : 1));\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on the Map with interactive ToolTip\r\nexport const showDataOnMap = (data,casesType=\"cases\") => (\r\n    data.map(country => (\r\n        <Circle\r\n            center = {[country.countryInfo.lat,country.countryInfo.long]}\r\n            fillOpacity = {0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier}\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}/>     {/* Background Image */}\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n); \r\n\r\n// export const sortData = (data) => {\r\n//     const sortedData = [...data];\r\n//     sortedData.sort((a,b) => {\r\n//         if(a.cases>b.cases){\r\n//             return -1;\r\n//         }else{\r\n//             return 1;\r\n//         }\r\n//     });\r\n//     return sortedData;\r\n// }","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap,TileLayer} from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* Loop through all Countries and Draw Circle on all Countries */}\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) => (  //Or we can just use country here and use country.cases and country.country in td\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))};\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState,useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function(value,index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nfunction LineGraph({casesType = \"cases\",...props}){\r\n    const [data,setData] = useState({});\r\n    \r\n    //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n    const buildChartData = (data,casesType=\"cases\") => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for(let date in data.cases) {        //data.cases contains date,cases key value pairs\r\n            if(lastDataPoint){\r\n                let newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    };\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                const chartData = buildChartData(data,casesType);\r\n                setData(chartData);\r\n            });\r\n        };\r\n        fetchData();\r\n    },[casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length>0 && (\r\n                <Line \r\n                options = {options}\r\n                data = {{\r\n                    datasets: [{\r\n                        backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                        borderColor: \"#CC1034\",\r\n                        data: data      //key data is from documentation while value data is our useState data \r\n                    },],\r\n                }}\r\n                />\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport './InfoBox.css';\r\nfunction InfoBox({ title,cases,isRed,active,total, ...props }){\r\n    return (\r\n            <Card onClick = {props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"} `}> {/* if active is true add selected class */}\r\n                <CardContent>\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                        {title}\r\n                    </Typography>\r\n                    <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                    <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                        {total} Total\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n\r\n// Press rfce for Basic Structure Below\r\n// import React from 'react'\r\n\r\n// function InfoBox() {\r\n//     return (\r\n//         <div>\r\n            \r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default InfoBox\r\n// ","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport { sortData, prettyPrintStat } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\nimport './App.css';\nimport InfoBox from './InfoBox';\n\nfunction App(){\n  const [countries,setCountries] = useState([]);\n  const [country,setCountry] = useState(\"worldwide\");\n  const [countryInfo,setCountryInfo] = useState({});\n  const [tableData,setTableData] = useState([]);\n  const [mapCenter,setMapCenter] = useState({ lat: 34.80746, lng: -40.4796}); //Center of Map\n  const [mapZoom,setMapZoom] = useState(3); \n  const [mapCountries,setMapCountries] = useState([]);\n  const [casesType,setCasesType] = useState(\"cases\");\n  // State --> How to write a variable in React\n\n  //This use effect will Fetch Data For initial Look --> Worldwide Content\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    //We use async --> Send the request : Wait for Data to Load before carrying on the Process : Stored in our Variable for Manupulation\n    const getCountriesData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }\n        ));\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n    getCountriesData(); //Calling the Function\n  },[]);\n\n  //This Function is to show the new Selected Value from the Dropdown\n  const onCountryChange = async(event) =>{\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n    const url = \n      countryCode === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    \n      // When we Change the country from the Dropdown we store all the data regarding that country in countryInfo\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long])\n      setMapZoom(4);\n    });\n  \n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          {/* Material UI : FormControl, Select, MenuItem */}\n          <FormControl className=\"app__dropdown\"> {/* component__element  --> BEM Convention*/}\n            <Select variant = \"outlined\" value = {country} onChange={onCountryChange}>\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {/* Loop through all the Countries for DropDown */}\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n        {/* InfoBoxes */}\n        <div className=\"app__stats\">\n          {/* Current Code works just for Selected values and we need to initialize values for Worldwide */}\n              <InfoBox\n                isRed\n                active = {casesType === \"cases\"} \n                onClick = {(e) => setCasesType(\"cases\")}\n                title = \"Coronavirus Cases\" \n                cases = {prettyPrintStat(countryInfo.todayCases)} \n                total = {prettyPrintStat(countryInfo.cases)} \n                />\n              <InfoBox\n                active = {casesType === \"recovered\"} \n                onClick = {(e) => setCasesType(\"recovered\")}\n                title = \"Recovered Cases\" \n                cases = {prettyPrintStat(countryInfo.todayRecovered)} \n                total = {prettyPrintStat(countryInfo.recovered)} \n                />\n              <InfoBox\n                isRed \n                active = {casesType === \"deaths\"}\n                onClick = {(e) => setCasesType(\"deaths\")}\n                title = \"Death\" \n                cases = {prettyPrintStat(countryInfo.todayDeaths)} \n                total = {prettyPrintStat(countryInfo.deaths)} \n                />\n        </div>\n        {/* Maps */}\n        <Map\n          casesType = {casesType} \n          countries = {mapCountries}\n          center = {mapCenter}\n          zoom = {mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries = {tableData}/>\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType = {casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n\n// https://disease.sh/v3/covid-19/countries --> API Call\n// Useeffect --> Runs a piece of code based on a given condition\n\n// const [countries,setCountries] = useState([\"USA\",\"US\",\"INDIA\"]);\n{/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            <MenuItem value=\"worldwide\">Option 1</MenuItem>\n            <MenuItem value=\"worldwide\">Option 2</MenuItem>\n            <MenuItem value=\"worldwide\">Option 3</MenuItem> */}\n\n// useEffect(() => {\n//   // The Code in this block runs once when the component is loaded and when countries variables value changes\n//   // If the Array was empty then this block loads only once  --> When the component is loaded\n// }, [countries]);\n\n// \n\n// {/* HEADER */}\n// {/* TITLE + DROPDOWN */}\n// {/* INFOBOX */}\n// {/* INFOBOX */}\n// {/* INFOBOX */}\n// {/* TABLES */}\n// {/* GRAPHS */}\n// {/* MAPS */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}